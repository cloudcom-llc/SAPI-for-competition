services:
  # Django service
  # gunicorn config.wsgi:application --bind 0.0.0.0:8000
  # daphne -b 0.0.0.0 -p 8000 config.asgi:application
  web:
    build:
      context: .  # Path to the directory containing your Dockerfile
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app  # Mount the app directory into the container
      - ./media:/app/media  # Mount the media folder to persist data
    env_file:
      - .env  # Load environment variables from the .env file
    ports:
      - "8008:8000"  # Expose port 8000 for Django
    networks:
      - app_network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Nginx service
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro  # Custom Nginx config
      - ./media:/app/media  # Volume the media folder
      - ./static:/app/static  # Mount static files to serve them from the host
    ports:
      - "8080:80"  # Expose port 80 for HTTP
    depends_on:
      - web
    networks:
      - app_network

  # Celery worker
#  celery:
#    image: sapi-backend-web:latest
##    build:
##      context: .
#    command: celery -A config worker -l INFO
#    volumes:
#      - .:/app
#    env_file:
#      - .env
#    depends_on:
#      - web
#      - redis
#    networks:
#      - app_network
#
#  celery-beat:
#    image: sapi-backend-web:latest
##    build:
##      context: .
#    command: celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
#    volumes:
#      - .:/app
#    env_file:
#      - .env
#    depends_on:
#      - web
#      - redis
#    networks:
#      - app_network
#  flower:
#    image: sapi-backend-web:latest
##    build:
##      context: .
#    command: celery --broker=redis://redis:6379/0 flower --port=5555
#    env_file:
#      - .env
#    ports:
#      - "5555:5555"
#    depends_on:
#      - celery
#    networks:
#      - app_network
#
#  # Redis broker
#  redis:
#    image: redis:7
#    ports:
#      - "6379:6379"
#    networks:
#      - app_network

  # MINIO service
  minio:
    container_name: minio
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: "${MINIO_USERNAME}"
      MINIO_ROOT_PASSWORD: "${MINIO_PASSWORD}"
      MINIO_ADDRESS: ':9000'
      MINIO_CONSOLE_ADDRESS: ':9001'
    volumes:
      - ./minio_data:/data
    command: server --compat /data --console-address ":9001"
    networks:
      - app_network

volumes:
  minio_data:

networks:
  app_network: